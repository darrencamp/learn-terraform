name: Terraform pull request

on:
  pull_request:
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform Pull-Request'
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}    
    runs-on: ubuntu-latest
    
    steps:
    - name: Log into Azure
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
    - name: Retrieve keyvault secrets
      uses: Azure/get-keyvault-secrets@v1
      with: 
        keyvault: "CodingSecrets"
        secrets: 'learn-terraform-backend-key'
      id: backendKey
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Transform
      uses: hashicorp/setup-terraform@v1
      with: 
        terraform_version: latest
    - name: Terraform Format
      run: terraform fmt -check
    - name: Terraform init
      run: terraform init
      env:
        ARM_ACCESS_KEY: ${{steps.backendKey.learn-terraform-backend-key}}
    - name: Terraform Validate
      run: terraform validate -no-color
    - name: Terraform plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: true
    - name: Update Pull Request
      uses: actions/github-script@6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

